ungroup() %>%
mutate(y_full = change_p_i_full * y)
# full endowment general equilibrium of general expenditures
ch2_application1 <- ch2_application1 %>%
mutate(e_full = change_p_j_full * e * (exporter == importer)) %>%
group_by(importer) %>%
mutate(e_full = max(e_full, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
e_full_r = e_full * (importer == ref_country0),
e_full_r = max(e_full_r, na.rm = T)
)
# full endowment general equilibrium for multilateral resistances
ch2_application1 <- ch2_application1 %>%
mutate(
omr_full = y_full * e_r_cfl_0 / exp(fe_exporter_cfl_0),
imr_full = e_full / (exp(fe_importer_cfl_0) * e_full_r),
rgdp_full = (change_p_i_full*y_full / imr_full^(1 / (1 - sigma)))
)
# full endowment general equilibrium for trade flows
ch2_application1 <- ch2_application1 %>%
mutate(x_full = (y_full * e_full * tij_cfl) / (imr_full * omr_full)) %>%
group_by(exporter) %>%
mutate(xi_full = sum(x_full * (importer != exporter), na.rm = T)) %>%
ungroup()
### Step IV: Collect, construct, and report indexes of interest
# ---------- build country-level indexes like Stata’s collapse/joinby ----------
# 1) Make a diagonal mask once
diag_mask <- ch2_application1$exporter == ch2_application1$importer
# 2) Exporter totals for baseline/conditional/full (tot_exp_*), as in Stata
totals_by_exporter <- ch2_application1 %>%
group_by(exporter) %>%
summarise(
tot_exp_bsln = sum(tradehat_bln * (exporter != importer), na.rm = TRUE),
tot_exp_cndl = sum(tradehat_cfl * (exporter != importer), na.rm = TRUE),
tot_exp_full = sum(x_full        * (exporter != importer), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
exports_cndl_ch = 100 * (tot_exp_cndl / pmax(tot_exp_bsln, .Machine$double.eps) - 1),
exports_full_ch = 100 * (tot_exp_full / pmax(tot_exp_bsln, .Machine$double.eps) - 1)
)
# 3) RGDP by exporter (use *diagonal* row, like Stata)
rgdp_by_exporter <- ch2_application1 %>%
filter(diag_mask) %>%
transmute(
exporter,
rGDP_bsln = y / (imr_bln^(1/(1 - sigma))),
rGDP_cndl = y / (imr_cfl^(1/(1 - sigma))),
rGDP_full = (change_p_i_full * y) / (imr_full^(1/(1 - sigma)))
) %>%
group_by(exporter) %>%
summarise(across(everything(), ~ sum(.x, na.rm = TRUE)), .groups = "drop") %>%
mutate(
rgdp_cndl_ch = 100 * (rGDP_cndl / pmax(rGDP_bsln, .Machine$double.eps) - 1),
rgdp_full_ch = 100 * (rGDP_full / pmax(rGDP_bsln, .Machine$double.eps) - 1)
)
# 4) OMR by exporter (single value per exporter), then % changes
omr_by_exporter <- ch2_application1 %>%
group_by(exporter) %>%
summarise(
omr_bsln = mean(omr_bln, na.rm = TRUE),
omr_cndl = mean(omr_cfl, na.rm = TRUE),
omr_full = mean(omr_full, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
omr_cndl_ch = 100 * (omr_cndl / pmax(omr_bsln, .Machine$double.eps) - 1),
omr_full_ch = 100 * (omr_full / pmax(omr_bsln, .Machine$double.eps) - 1)
)
# 5) IMR by importer (single value per importer), then % changes
imr_by_importer <- ch2_application1 %>%
group_by(importer) %>%
summarise(
imr_bsln = mean(imr_bln,  na.rm = TRUE),
imr_cndl = mean(imr_cfl,  na.rm = TRUE),
imr_full = mean(imr_full, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
imr_cndl_ch = 100 * (imr_cndl / pmax(imr_bsln, .Machine$double.eps) - 1),
imr_full_ch = 100 * (imr_full / pmax(imr_bsln, .Machine$double.eps) - 1)
) %>%
rename(country = importer)
# 6) Exporter-side table, including p (exporter factory-gate price change)
# If you saved p_full as a *level*, report p = 100*(p_full - 1).
# If you only have change_p_i_full, set p = 100*(change_p_i_full - 1).
p_by_exporter <- ch2_application1 %>%
group_by(exporter) %>%
summarise(
p = 100 * (mean(change_p_i_full, na.rm = TRUE) - 1),  # or use p_full if you saved it
.groups = "drop"
)
exporter_side <- totals_by_exporter %>%
left_join(rgdp_by_exporter, by = "exporter") %>%
left_join(omr_by_exporter,  by = "exporter") %>%
left_join(p_by_exporter,    by = "exporter") %>%
transmute(
country = exporter,
# Conditional GE
cond_exports = exports_cndl_ch,
cond_rgdp    = rgdp_cndl_ch,
cond_imr     = NA_real_,   # will come from importer side after join
cond_omr     = omr_cndl_ch,
# Full-Endowment GE
full_exports = exports_full_ch,
full_rgdp    = rgdp_full_ch,
full_imr     = NA_real_,   # will come from importer side after join
full_omr     = omr_full_ch,
p = p
)
# 7) Join exporter and importer sides on country
table_country <- exporter_side %>%
left_join(imr_by_importer %>% select(country, imr_cndl_ch, imr_full_ch),
by = "country") %>%
mutate(
cond_imr = imr_cndl_ch,
full_imr = imr_full_ch
) %>%
select(country,
`Exports (Cond.)` = cond_exports,
`RGDP (Cond.)`    = cond_rgdp,
`IMR (Cond.)`     = cond_imr,
`OMR (Cond.)`     = cond_omr,
`Exports (Full)`  = full_exports,
`RGDP (Full)`     = full_rgdp,
`IMR (Full)`      = full_imr,
`OMR (Full)`      = full_omr,
`p`               = p) %>%
mutate(country = ifelse(country == "0-DEU" | country == "ZZZ", "DEU", as.character(country))) %>%
arrange(country) %>%
mutate(across(-country, ~ round(.x, 2)))
table_country
table_country
table_country
rm(list=ls())
################################################################################
#### General equilibrium trade policy analysis with structural gravity in R ####
################################################################################
# dataset and summary functions
library(tradepolicy)
# data transformation
library(dplyr)
library(tidyr)
# regression
library(fixest)
# plots
library(ggplot2)
# define some parameters
ref_country <- "DEU"
ref_country0 <- paste0("0-", ref_country)
sigma <- 7
max_dif <- 1
sd_dif <- 1
# load the data
ch2_application1 <- agtpa_applications %>%
select(exporter, importer, pair_id, year, trade, dist, cntg, lang, clny) %>%
filter(year == 2006) %>%
mutate(
log_dist = log(dist),
intl = ifelse(exporter != importer, 1, 0),
exporter = ifelse(exporter == ref_country, ref_country0, exporter),
importer = ifelse(importer == ref_country, ref_country0, importer)
) %>%
arrange(importer) %>%
# Create Yit
group_by(exporter) %>%
mutate(y = sum(trade, na.rm = TRUE)) %>%
# Create Eit
group_by(importer) %>%
mutate(e = sum(trade, na.rm = TRUE)) %>%
# Create Er (baseline reference expenditure)
ungroup() %>%
mutate(e_r = max(ifelse(importer == ref_country0, e, NA), na.rm = TRUE))
# keep a scalar copy of baseline E_r for anchoring later
E_r_baseline <- unique(ch2_application1$e_r)[1]
### Step I: "Baseline" Scenario
fit_baseline_app1 <- fepois(
trade ~ log_dist + cntg + intl | exporter + importer,
data = ch2_application1,
glm.iter = 500
)
# Construct the baseline OMR and IMR
ch2_application1 <- ch2_application1 %>%
mutate(
fe_exporter_bln = fixef(fit_baseline_app1)$exporter[exporter],
fe_importer_bln = fixef(fit_baseline_app1)$importer[importer]
)
# compute the variables of bilateral trade cost and multilateral resistances
ch2_application1 <- ch2_application1 %>%
mutate(
tij_bln = exp(fit_baseline_app1$coefficients["log_dist"] * log_dist +
fit_baseline_app1$coefficients["cntg"] * cntg +
fit_baseline_app1$coefficients["intl"] * intl),
# OMR and IMR
omr_bln = y * (e_r / exp(fe_exporter_bln)),
imr_bln = e / (exp(fe_importer_bln) * e_r),
# real GDP (baseline)
rgdp_bln = (y / imr_bln^(1 / (1 - sigma)))
)
# baseline fitted trade
ch2_application1 <- ch2_application1 %>%
mutate(tradehat_bln = predict(fit_baseline_app1, ch2_application1, type = "response")) %>%
group_by(exporter) %>%
mutate(xi_bln = sum(tradehat_bln * (exporter != importer), na.rm = TRUE)) %>%
ungroup()
### Step II: Define a counterfactual scenario (remove border)
ch2_application1 <- ch2_application1 %>%
mutate(
tij_cfl = exp(fit_baseline_app1$coefficients["log_dist"] * log_dist +
fit_baseline_app1$coefficients["cntg"] * cntg)
)
### Step III: Solve the counterfactual model
fit_counterfactual_app1 <- fepois(
trade ~ 0 | exporter + importer,
data = ch2_application1,
offset = ~ log(tij_cfl),
glm.iter = 500
)
# extract the fixed effects
ch2_application1 <- ch2_application1 %>%
mutate(
fe_exporter_cfl = fixef(fit_counterfactual_app1)$exporter[exporter],
fe_importer_cfl = fixef(fit_counterfactual_app1)$importer[importer]
)
# compute MRs and rgdp under conditional GE
ch2_application1 <- ch2_application1 %>%
mutate(
omr_cfl = y * (e_r / exp(fe_exporter_cfl)),
imr_cfl = e / (exp(fe_importer_cfl) * e_r),
rgdp_cfl = (y / imr_cfl^(1 / (1 - sigma)))
)
# conditional fitted trade
ch2_application1 <- ch2_application1 %>%
mutate(tradehat_cfl = predict(fit_counterfactual_app1, ch2_application1, type = "response")) %>%
group_by(exporter) %>%
mutate(xi_cfl = sum(tradehat_cfl * (exporter != importer), na.rm = TRUE)) %>%
ungroup()
# changes in bilateral costs and trade-balance ratio (phi_i)
ch2_application1 <- ch2_application1 %>%
mutate(
change_tij = tij_cfl / tij_bln,
phi = ifelse(importer == exporter, e / y, NA_real_)
) %>%
group_by(exporter) %>%
mutate(phi = max(phi, na.rm = TRUE)) %>%
ungroup()
# single-step price changes (conditional)
ch2_application1 <- ch2_application1 %>%
group_by(exporter) %>%
mutate(change_p_i = ((exp(fe_exporter_cfl) / e_r) /
(exp(fe_exporter_bln) / e_r))^(1 / (1 - sigma))) %>%
ungroup() %>%
group_by(importer) %>%
mutate(
change_p_j = ifelse(importer == exporter, change_p_i, NA_real_),
change_p_j = max(change_p_j, na.rm = TRUE)
) %>%
ungroup()
# conditional flows adjusted by price changes
ch2_application1 <- ch2_application1 %>%
mutate(trade_cfl = tradehat_cfl * change_p_i * change_p_j)
# --------- Initialize objects for the full-endowment iteration ----------
ch2_application1 <- ch2_application1 %>%
mutate(
omr_cfl_0 = omr_cfl,
imr_cfl_0 = imr_cfl,
change_imr_full_0 = 1,
change_omr_full_0 = 1,
change_p_i_0 = change_p_i,
change_p_j_0 = change_p_j,
fe_exporter_cfl_0 = fe_exporter_cfl,
fe_importer_cfl_0 = fe_importer_cfl,
tradehat_0 = tradehat_cfl,
e_r_cfl_0 = e_r
)
# --------- Full-endowment loop (convergence on Δp_i) ----------
sd_dif <- 1; max_dif <- 1
while (sd_dif > 1e-5 | max_dif > 1e-5) {
ch2_application1 <- ch2_application1 %>%
mutate(trade_1 = tradehat_0 * change_p_i_0 * change_p_j_0 /
pmax(change_omr_full_0 * change_imr_full_0, .Machine$double.eps))
fit_counterfactual_app1_2 <- fepois(
trade_1 ~ 0 | exporter + importer,
data = ch2_application1,
offset = ~ log(tij_cfl),
glm.iter = 500
)
ch2_application1 <- ch2_application1 %>%
mutate(
fe_exporter_cfl_1 = fixef(fit_counterfactual_app1_2)$exporter[exporter],
fe_importer_cfl_1 = fixef(fit_counterfactual_app1_2)$importer[importer],
tradehat_1        = predict(fit_counterfactual_app1_2, ch2_application1, type = "response")
) %>%
group_by(exporter) %>%
mutate(y_cfl_1 = sum(tradehat_1, na.rm = TRUE)) %>%
ungroup() %>%
mutate(e_cfl_1 = ifelse(importer == exporter, phi * y_cfl_1, NA_real_)) %>%
group_by(importer) %>%
mutate(e_cfl_1 = max(e_cfl_1, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
e_r_cfl_1 = max(ifelse(importer == ref_country0, e_cfl_1, -Inf), na.rm = TRUE),
change_p_i_1 = ((exp(fe_exporter_cfl_1) / e_r_cfl_1) /
(exp(fe_exporter_cfl_0) / e_r_cfl_0))^(1 / (1 - sigma))
) %>%
group_by(importer) %>%
mutate(
change_p_j_1 = ifelse(importer == exporter, change_p_i_1, NA_real_),
change_p_j_1 = max(change_p_j_1, na.rm = TRUE)
) %>%
ungroup() %>%
mutate(
omr_cfl_1 = (y_cfl_1 * e_r_cfl_1) / exp(fe_exporter_cfl_1),
imr_cfl_1 =  e_cfl_1 / (exp(fe_importer_cfl_1) * e_r_cfl_1)
)
# Convergence metrics: p_i(t) - p_i(t-1)
diffs   <- ch2_application1$change_p_i_1 - ch2_application1$change_p_i_0
sd_dif  <- stats::sd(diffs, na.rm = TRUE)
max_dif <- max(abs(diffs), na.rm = TRUE)
# Roll forward
ch2_application1 <- ch2_application1 %>%
mutate(
change_omr_full_1 = omr_cfl_1 / omr_cfl_0,
change_imr_full_1 = imr_cfl_1 / imr_cfl_0,
omr_cfl_0 = omr_cfl_1,
imr_cfl_0 = imr_cfl_1,
change_omr_full_0 = change_omr_full_1,
change_imr_full_0 = change_imr_full_1,
change_p_i_0 = change_p_i_1,
change_p_j_0 = change_p_j_1,
fe_exporter_cfl_0 = fe_exporter_cfl_1,
fe_importer_cfl_0 = fe_importer_cfl_1,
tradehat_0 = tradehat_1,
e_r_cfl_0 = e_r_cfl_1
) %>%
select(-c(fe_exporter_cfl_1, fe_importer_cfl_1,
change_p_i_1, change_p_j_1, omr_cfl_1, imr_cfl_1, tradehat_1))
}
# ---------------- Full endowment construction (Stata-faithful) ----------------
# Use last μ̂ to build output
output_last <- ave(ch2_application1$tradehat_0, ch2_application1$exporter, FUN = sum)
# Expenditure from phi * output_last on diagonal, then importer-level carry
diag_mask <- ch2_application1$exporter == ch2_application1$importer
e_full_diag1 <- ifelse(diag_mask, ch2_application1$phi * output_last, NA_real_)
expndr_full1 <- ave(e_full_diag1, ch2_application1$importer, FUN = function(z) mean(z, na.rm = TRUE))
E_r_full <- max(ifelse(ch2_application1$importer == ref_country0, expndr_full1, -Inf), na.rm = TRUE)
# Exporter prices p_i from FE(last vs baseline), anchored by E_r_full/E_r_baseline
all_exp_last <- exp(ch2_application1$fe_exporter_cfl_0)
all_exp_base <- exp(ch2_application1$fe_exporter_bln)
p_full <- ((all_exp_last / all_exp_base) / (E_r_full / E_r_baseline))^(1 / (1 - sigma))
# Output at full endowment
y_full <- p_full * ch2_application1$y
# Recompute expenditure using y_full
e_full_diag2 <- ifelse(diag_mask, ch2_application1$phi * y_full, NA_real_)
e_full <- ave(e_full_diag2, ch2_application1$importer, FUN = function(z) mean(z, na.rm = TRUE))
e_full_r <- max(ifelse(ch2_application1$importer == ref_country0, e_full, -Inf), na.rm = TRUE)
# Full-endowment MRs
all_imp_last <- exp(ch2_application1$fe_importer_cfl_0)
omr_full <- y_full * e_full_r / all_exp_last
imr_full <- e_full / (all_imp_last * e_full_r)
# Full-endowment trade flows with counterfactual technology
x_full <- (y_full * e_full * ch2_application1$tij_cfl) / (imr_full * omr_full)
# Save back to your existing variable names (do not change names)
ch2_application1$change_p_i_full <- p_full
ch2_application1 <- ch2_application1 %>%
group_by(importer) %>%
mutate(
change_p_j_full = max(ifelse(importer == exporter, change_p_i_full, NA_real_), na.rm = TRUE)
) %>%
ungroup()
ch2_application1$y_full   <- y_full
ch2_application1$e_full   <- e_full
ch2_application1$e_full_r <- e_full_r
ch2_application1$omr_full <- omr_full
ch2_application1$imr_full <- imr_full
ch2_application1$x_full   <- x_full
# Real GDP under full endowment (correct formula)
ch2_application1 <- ch2_application1 %>%
mutate(rgdp_full = (y_full / imr_full^(1 / (1 - sigma))))
# Export totals under full endowment
ch2_application1 <- ch2_application1 %>%
group_by(exporter) %>%
mutate(xi_full = sum(x_full * (exporter != importer), na.rm = TRUE)) %>%
ungroup()
# ---------------- Country-level indexes (collapse/joinby in Stata) ----------------
# Exports by exporter
totals_by_exporter <- ch2_application1 %>%
group_by(exporter) %>%
summarise(
tot_exp_bsln = sum(tradehat_bln * (exporter != importer), na.rm = TRUE),
tot_exp_cndl = sum(tradehat_cfl * (exporter != importer), na.rm = TRUE),
tot_exp_full = sum(x_full        * (exporter != importer), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
exports_cndl_ch = 100 * (tot_exp_cndl / pmax(tot_exp_bsln, .Machine$double.eps) - 1),
exports_full_ch = 100 * (tot_exp_full / pmax(tot_exp_bsln, .Machine$double.eps) - 1)
)
# RGDP by exporter (diagonal rows)
rgdp_by_exporter <- ch2_application1 %>%
filter(exporter == importer) %>%
transmute(
exporter,
rGDP_bsln = y / (imr_bln^(1/(1 - sigma))),
rGDP_cndl = y / (imr_cfl^(1/(1 - sigma))),
rGDP_full = y_full / (imr_full^(1/(1 - sigma)))
) %>%
group_by(exporter) %>%
summarise(across(everything(), ~ sum(.x, na.rm = TRUE)), .groups = "drop") %>%
mutate(
rgdp_cndl_ch = 100 * (rGDP_cndl / pmax(rGDP_bsln, .Machine$double.eps) - 1),
rgdp_full_ch = 100 * (rGDP_full / pmax(rGDP_bsln, .Machine$double.eps) - 1)
)
# OMR by exporter
omr_by_exporter <- ch2_application1 %>%
group_by(exporter) %>%
summarise(
omr_bsln = mean(omr_bln, na.rm = TRUE),
omr_cndl = mean(omr_cfl, na.rm = TRUE),
omr_full = mean(omr_full, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
omr_cndl_ch = 100 * (omr_cndl / pmax(omr_bsln, .Machine$double.eps) - 1),
omr_full_ch = 100 * (omr_full / pmax(omr_bsln, .Machine$double.eps) - 1)
)
# IMR by importer
imr_by_importer <- ch2_application1 %>%
group_by(importer) %>%
summarise(
imr_bsln = mean(imr_bln, na.rm = TRUE),
imr_cndl = mean(imr_cfl, na.rm = TRUE),
imr_full = mean(imr_full, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(
imr_cndl_ch = 100 * (imr_cndl / pmax(imr_bsln, .Machine$double.eps) - 1),
imr_full_ch = 100 * (imr_full / pmax(imr_bsln, .Machine$double.eps) - 1)
) %>%
rename(country = importer)
# p (exporter factory-gate price change)
p_by_exporter <- ch2_application1 %>%
group_by(exporter) %>%
summarise(p = 100 * (mean(change_p_i_full, na.rm = TRUE) - 1), .groups = "drop")
# Assemble exporter-side and join importer IMR to match the paper-style table
exporter_side <- totals_by_exporter %>%
left_join(rgdp_by_exporter, by = "exporter") %>%
left_join(omr_by_exporter,  by = "exporter") %>%
left_join(p_by_exporter,    by = "exporter") %>%
transmute(
country = exporter,
`Exports (Cond.)` = exports_cndl_ch,
`RGDP (Cond.)`    = rgdp_cndl_ch,
`OMR (Cond.)`     = omr_cndl_ch,
`Exports (Full)`  = exports_full_ch,
`RGDP (Full)`     = rgdp_full_ch,
`OMR (Full)`      = omr_full_ch,
p
)
table_country <- exporter_side %>%
left_join(imr_by_importer %>% select(country, `IMR (Cond.)` = imr_cndl_ch, `IMR (Full)` = imr_full_ch),
by = "country") %>%
mutate(country = ifelse(country %in% c("ZZZ", "0-DEU"), "DEU", as.character(country))) %>%
arrange(country) %>%
mutate(across(-country, ~ round(.x, 2)))
# The object `table_country` now holds exporter/importer indexes like the Stata table.
table_country
totals_by_exporter
table_country
??grid.arrange
?grid.arrange
?gridExtra
??gridExtra
?gridExtra
?grid
# Clear workspace --------------------------------------------------------------
rm(list = ls())
# Set the working directory ----------------------------------------------------
setwd("C:/Users/muham/EGEI Dissertation/afcfta")
# Load the necessary libraries -------------------------------------------------
library(tidyverse)
library(here)
library(fixest)
library(flextable)
library(huxtable)
library(readr)
library(msm)
library(car)
all_indexes_geppml_agri <- readRDS("output/all_indexes_geppml_agri.rds")
View(all_indexes_geppml_agri)
# print rGDP_full_ch for each country in all_indexes_geppml_agri
for (i in 1:nrow(all_indexes_geppml_agri)) {
country <- all_indexes_geppml_agri$country[i]
rGDP_full_ch <- all_indexes_geppml_agri$rGDP_full_ch[i]
cat("Country:", country, "- rGDP_full_ch:", rGDP_full_ch, "\n")
}
all_indexes_geppml_agri <- readRDS("output/all_indexes_geppml_agri.rds")
# print rGDP_full_ch for each country in all_indexes_geppml_agri
for (i in 1:nrow(all_indexes_geppml_agri)) {
country <- all_indexes_geppml_agri$country[i]
rGDP_full_ch <- all_indexes_geppml_agri$rGDP_full_ch[i]
cat("Country:", country, "- rGDP_full_ch:", rGDP_full_ch, "\n")
}
all_indexes_geppml_agri <- readRDS("output/all_indexes_with_row_geppml_agri.rds")
# print rGDP_full_ch for each country in all_indexes_geppml_agri
for (i in 1:nrow(all_indexes_geppml_agri)) {
country <- all_indexes_geppml_agri$country[i]
rGDP_full_ch <- all_indexes_geppml_agri$rGDP_full_ch[i]
cat("Country:", country, "- rGDP_full_ch:", rGDP_full_ch, "\n")
}
View(all_indexes_geppml_agri)
